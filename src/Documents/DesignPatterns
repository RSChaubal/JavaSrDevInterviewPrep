----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Builder Pattern
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

public class MedianWithHeapQueues {

    private final String name ;
    private final int age ;
    private final String email ;

    private MedianWithHeapQueues(Builder builder) {
        this.name = builder.name ;
        this.age = builder.age ;
        this.email = builder.email ;
    }

    public static class Builder {
        private String name ;
        private int age ;
        private String email ;

        public Builder setName(String name) {
            this.name = name ;
            return this ;
        }

        public Builder setAge(int age) {
            this.age = age ;
            return this ;
        }

        public Builder setEmail(String email) {
            this.email = email ;
            return this ;
        }

        public MedianWithHeapQueues build() {
            return new MedianWithHeapQueues(this) ;
        }
    }

    public static void main(String[] args) {
        MedianWithHeapQueues medianWithHeapQueues = new MedianWithHeapQueues.Builder().setAge(19).setName("Alice").setEmail("alice.in.wonderland").build() ;
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Adapter Pattern
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class OldPrinter {
    public void printText(String text) {
        System.out.println("OldPrinter printing text: " + text) ;
    }
}

interface Printer {
    void print(String text) {}
}

class PrinterAdapter implements Printer {
    private OldPrinter oldPrinter ;

    public PrinterAdapter(OlderPrinter oldPrinter) {
        this.oldPrinter = oldPrinter ;
    }

    @Override
    public void print(String text) {
        oldPrinter.printText(text) ;
    }

    public static void main(String [] args) {
        Printer printer = new PrinterAdapter(new OldPrinter()) ;
        printer.print("Hello Pete! Good Morning! ") ;
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Proxy Pattern
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

interface Image {
    void display();
}

class RealImage implements Image {
    private String filename;

    public RealImage(String filename) {
        this.filename = filename;
        loadFromDisk();
    }

    private void loadFromDisk() {
        System.out.println("Loading " + filename);
    }

    public void display() {
        System.out.println("Displaying " + filename);
    }
}

class ProxyImage implements Image {
    private RealImage realImage;
    private String filename;

    public ProxyImage(String filename) {
        this.filename = filename;
    }

    public void display() {
        if (realImage == null) {
            realImage = new RealImage(filename);
        }
        realImage.display();
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Observer Pattern
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

interface Observer {
    void update(String message) ;
}

class ConcreteObserver implements Observer {
    private String name;

    public ConcreteObserver(String name) {
        this.name = name;
    }

    public void update(String message) {
        System.out.println(name + " received update: " + message);
    }
}

class Subject {
    private List<Observer> observers = new ArrayList<>() ;

    public void addObserver(Observer o) {
        observers.add(o) ;
    }

    public void notifyObservers(String message) {
        for (Observer o : observers) {
            o.update(message) ;
        }
    }

}